package seschool.bank.action;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.apache.struts2.interceptor.SessionAware;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

import seschool.bank.dao.BoardDAO;
import seschool.bank.util.FileService;
import seschool.bank.util.PageNavigator;
import seschool.bank.vo.Board;

/**
 * 문의 게시판 관련 액션 클래스 
 */
public class BoardAction extends ActionSupport implements SessionAware {
	Board board;					/** 게시글 정보 */
	int boardno;					/** 게시글 보기, 삭제 시 글번호 */
	
	List<Board> boardlist;			/** 게시물 목록 */
	PageNavigator pagenavi;			/** 페이징 관련 정보 */
	int currentPage = 1;			/** 게시물 목록의 현재 페이지 */
	String searchField;				/** 검색 대상 필드 */
	String searchText;				/** 검색어 */
	
	private File upload;					/** 업로드할 파일. Form의 <file> 태그의 name. */
	private String uploadFileName;			/** 업로드할 파일의 파일명 (File타입 속성명 + "FileName") */
	private String uploadContentType;		/** 업로드할 파일의 컨텐츠 타입 (File타입 속성명 + "ContentType") */
	
	BoardDAO dao = new BoardDAO();
	Map<String, Object> session;			/** 세션 정보 */

	@Override
	public void setSession(Map<String, Object> session) {
		this.session = session;		
	}

	/**
	 * 문의 게시물 저장
	 */
	public String insertBoard() throws Exception {
		//세션으로부터 로그인한 ID 읽어서 board객체에 저장
		String loginId = (String) session.get("loginId");
		board.setCustid(loginId);
		
		//첨부파일이 있으면 저장 처리
		if (upload != null) { 
			FileService fs = new FileService();
			String basePath = getText("board.uploadpath");		//user.properties에 지정된 파일 저장 경로
			String savedfile = fs.saveFile(upload, basePath, uploadFileName);	//서버에 임시 업로드된 파일객체, 저장경로, 업로드당시의 파일명 전달하고 실제 저장된 파일명 리턴받음
			board.setSavedfile(savedfile);
			board.setOriginalfile(uploadFileName);
		}
		
		dao.insertBoard(board);		

		return SUCCESS;
	}

	/** 
	 * 게시판 글목록 보기
	 */
	public String listBoard() throws Exception {
		//user.properties에서 지정한 페이징 관련 상수들 읽기
		int countPerPage = Integer.parseInt(getText("board.countperpage"));		//페이지당 글목록 수
		int pagePerGroup = Integer.parseInt(getText("board.pagepergroup"));		//그룹당 페이지 수

		BoardDAO dao = new BoardDAO();
		
		System.out.println("검색필드:" + searchField + ",검색어:" + searchText);

		//전체 글수 구하기
		int total = dao.getTotal(searchField, searchText);
		
		//PageNavigator 객체 생성 (페이지당 글수, 그룹당 페이지 수, 현재 페이지, 전체 글수)
		pagenavi = new PageNavigator(countPerPage, pagePerGroup, currentPage, total);
		
		//현재 페이지에 해당하는 글 목록 읽기 (전체 레코드 중 보여줄 첫번째 글의 위치, 페이지당 글 수 )
		boardlist = dao.listBoard(searchField, searchText, pagenavi.getStartRecord(), pagenavi.getCountPerPage());
		
		System.out.println(boardlist);
		return SUCCESS;

	}

	/**
	 * 글 읽기 - 전달된 번호의 글 정보를 테이블에서 읽는다.
	 */
	public String readBoard() throws Exception {
		//전달된 글번호로 검색. 해당 번호의 글이 없으면 리턴
		board = dao.getBoard(boardno);
		if (board == null) return INPUT;
		return SUCCESS;
	}

	/** 
	 * 글 삭제 - 전달된 번호의 글 정보를 검색하여, 첨부파일이 있으면 먼저 삭제하고 테이블의 글 정보를 지운다.
	 */
	public String deleteBoard() throws Exception {
		String loginId = (String) session.get("loginId");

		//관리자 답변이 안달린 본인글이면 삭제 가능. 관리자는 무조건 삭제 가능.
		board = dao.getBoard(boardno);
		
		System.out.println("글삭제:" + board);
		
		if (board != null && board.getCustid().equals(loginId) && board.getReplytext() == null || loginId.equals("admin")) {
			if (board.getSavedfile() != null) {	//첨부파일이 있으면
				FileService fs = new FileService();
				String basepath = getText("board.uploadpath");
				fs.fileDelete(basepath + "/" + board.getSavedfile());	//저장된 파일의 전체경로를 전달하여 파일 삭제
			}
			
			
			dao.deleteBoard(boardno);			//본문 글정보 삭제
		}
		return SUCCESS;
	}


	
/*
	public String editForm() throws Exception {
		//로그인한 ID확인
		ActionContext context = ActionContext.getContext();
		Map<String, Object> session = (Map<String, Object>) context.getSession();
		String loginId = (String) session.get("loginId");

		board = new BoardDAO().getBoard(boardnum);
		
		if (loginId.equals(board.getId())) return SUCCESS;	//본인 글이면
		else return INPUT;		//본인글이 아니면
	}
	
	//글 수정 처리
	public String editBoard() throws Exception {
		BoardDAO dao = new BoardDAO();

		//첨부파일이 null이 아니면 기존 파일 먼저 삭제하고 새로운 첨부파일 정보 포함하여 수정
		if (upload != null) {
			String basePath = getText("board.uploadpath");		//user.properties에 지정된 파일 저장 경로
			Board beforeBoard = dao.getBoard(board.getBoardnum());	//수정 전의 파일 정보
			FileService fs = new FileService();
			fs.fileDelete(basePath + "/" + beforeBoard.getSavedfile());	//저장된 파일의 전체경로를 전달하여 파일 삭제
			
			String savedfile = fs.saveFile(upload, basePath, uploadFileName);	//서버에 임시 업로드된 파일객체, 저장경로, 업로드당시의 파일명 전달하고 실제 저장된 파일명 리턴받음
			board.setSavedfile(savedfile);
			board.setOriginalfile(uploadFileName);
		}
		
		dao.updateBoard(board);		//파일정보 수정

		//수정된 글 읽기로 돌아가기 위해
		boardnum = board.getBoardnum();
		return SUCCESS;
	}
	*/
	

	
	public Board getBoard() {
		return board;
	}

	public void setBoard(Board board) {
		this.board = board;
	}

	public int getBoardno() {
		return boardno;
	}

	public void setBoardno(int boardno) {
		this.boardno = boardno;
	}

	public List<Board> getBoardlist() {
		return boardlist;
	}

	public void setBoardlist(List<Board> boardlist) {
		this.boardlist = boardlist;
	}

	public PageNavigator getPagenavi() {
		return pagenavi;
	}

	public void setPagenavi(PageNavigator pagenavi) {
		this.pagenavi = pagenavi;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public String getSearchField() {
		return searchField;
	}

	public void setSearchField(String searchField) {
		this.searchField = searchField;
	}

	public String getSearchText() {
		return searchText;
	}

	public void setSearchText(String searchText) {
		this.searchText = searchText;
	}

	public File getUpload() {
		return upload;
	}

	public void setUpload(File upload) {
		this.upload = upload;
	}

	public String getUploadFileName() {
		return uploadFileName;
	}

	public void setUploadFileName(String uploadFileName) {
		this.uploadFileName = uploadFileName;
	}

	public String getUploadContentType() {
		return uploadContentType;
	}

	public void setUploadContentType(String uploadContentType) {
		this.uploadContentType = uploadContentType;
	}

	
}
